import numpy as np
import matplotlib.pyplot as plt
import time


def plotElement(coord, *args):
    coord = np.concatenate((coord, coord[0:1]))
    plt.plot(coord[:, 0], coord[:, 1], *args)
    return

def plotGuassian(coord, *args):
    for gaussianPoints in coord:
        plt.plot(gaussianPoints[:, 0], gaussianPoints[:, 1], *args)
    for i, coorGaussian in enumerate(coord[0]):
        plt.text(x=coorGaussian[0], y=coorGaussian[1], s=str(i))
    return


def saveVTK(fileName, nodeCoord, node2Element, **kwargs):
    nodeNum = len(nodeCoord)
    elementNum = len(node2Element)
    with open(fileName, 'w') as f:
        f.write('# vtk DataFile Version 4.2\n')
        f.write('vtk file generated by meshmagick on %s\n' % time.strftime('%c'))
        f.write('ASCII\n')
        f.write('DATASET UNSTRUCTURED_GRID\n')
        f.write('\n')
        f.write('POINTS %u float\n' % nodeNum)
        for vertex in nodeCoord:
            f.write('%f %f %f\n' % (vertex[0], vertex[1], 0.))
        f.write('\n')
        f.write('CELLS %u %u\n' % (elementNum, 5 * elementNum))
        for face in node2Element:
            if face[0] == face[-1]:  # Triangle
                f.write('3 %u %u %u\n' % (face[0], face[1], face[2]))
            else:  # Quadrangle
                f.write('4 %u %u %u %u\n' % (face[0], face[1], face[2], face[3]))

        f.write('\n')
        f.write('CELL_TYPES %u\n' % len(node2Element))
        for i in range(len(node2Element)):
            f.write('9\n')

        # -----------------------------------------------------
        # writing the point data
        f.write('\nPOINT_DATA %u\n' % (nodeNum))
        # f.write("SCALARS test float\nLOOKUP_TABLE default\n")
        # for uu in u:
        #     f.write('%.8f\n' % (uu[0]))
        for key in kwargs:
            temp = kwargs[key]
            f.write("VECTORS %s float\n" % key)
            if temp[0].shape == (2, 2):
                for uu in temp:
                    f.write('%.8f %.8f %.8f\n' % (uu[0, 0], uu[1, 1], uu[0, 1]))
            else:
                for uu in temp:
                    f.write('%.8f %.8f %.8f\n' % (uu[0], uu[1], 0.))
    return
